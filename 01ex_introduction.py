# -*- coding: utf-8 -*-
"""01ex_introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mhGHZi0FUvj1lVN6k3i1kM5w0iP3tr1d
"""

# Number 1: The HelloWorld replacement Exercise

results = []
for i in range (1,101):
    print(i)
    res = ""
    if i % 3 == 0 and i % 5 == 0:
        res = "HelloWorld"
        results.append((i,res))
    elif i % 3 == 0:
        res = "Hello"
        results.append((i,res))
    elif i % 5 == 0:
        res = "World"
        results.append((i,res))
    print(res)

counter = 0
for i in results:
    if "Hello" in i[1]:
        list_i = list(i)      
        list_i[1] = list_i[1].replace('Hello', 'Python')
        i = tuple(list_i)
        results[counter] = i

    if "World" in i[1]:
        list_i = list(i)       
        list_i[1] = list_i[1].replace('World', 'Works')
        i = tuple(list_i)
        results[counter] = i

    counter = counter + 1

print(results)

#Number 2: The Swap Exercise


x = input("Enter x: ")
y = input("Enter y: ")

x, y = y, x
print("x: "+ str(x))
print("y: "+ str(y))

#Number 3: Computing The Distance Exercise

import math

values1 = input("Input x and y positions of the first point by using a comma (,) : ")
list1 = values1.split(",")
point1 = tuple(list1)
values2 = input("Input x and y positions of the first point by using a comma (,) : ")
list2 = values2.split(",")
point2 = tuple(list2)

euclidean_distance = math.sqrt(math.pow(int(list1[0])-int(list2[0]), 2) + math.pow(int(list1[1])-int(list2[1]), 2))
print("Euclidean distance: " + str(euclidean_distance))

#Number 4: Counting Letters Exercise

input_string = input("Please enter the string: ")
lower_input_string = input_string.lower()

result = {}

for i in input_string:
    if i not in result:
        result[i] = 1
    else:
        result[i] = result[i] + 1

print(result)

#Number 5: Isolating The Unique Exercise

l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]
uni = []
counter = 0
for i in range(len(l)):
    flag = 0
    for j in range(len(l)):
        if l[i]== l[j] and i != j:
            flag = 1
            break
    if not flag:
        uni.append(l[i])
        counter = counter + 1

print(str(counter)+" Numbers that are unique: ")
print(uni)

#Number 6: Casting Exercise

x = input("Please Specify The First Variable: ")
y = input("Please Specify The Second Variable: ")

try: 
    res = float(x) + float(y)
    print("Float Result: " + str(res))
    print("Integer Result: " + str(int(res)))

except:
    print("There is no number you entered")

#Number 7: Cubes Exercise

import math

#Part A:
cube = []
for i in range(0, 11):
    cube.append(math.pow(i,3))

print(cube)

#Part B:
cube2 = []
[cube2.append(math.pow(x,3)) for x in range(0,11)]

print(cube2)

#Number 8: List Comprehension Exercise

# a = []
# for i in range(3):
#     for j in range(4):
#         a.append((i, j))
# print(a)


a = []
[a.append((i,j)) for i in range(3) for j in range(4)]

print(a)

#Number 9: Nested list comprehension Exercise

import math 

c = 1
pythagorean_triples = []
while c < 100:
    for i in range (1,10):
        for j in range (1,10):
            if math.pow(i,2) + math.pow(j,2) == math.pow(c,2):
                pythagorean_triples.append([i,j,c])
    c = c+1

print(pythagorean_triples)

#Number 10: Normalization Of a N-Dimensional Vector Exercise

import math

def norm(tuple_v): 
    counter = 0 
    list_tuple = list(tuple_v)
    squared_sum = 0 
    for i in list_tuple:      
        squared_sum += int(i)**2
    sqrt_squared_sum = math.sqrt(squared_sum)
    for j in list_tuple:
        j = int(j) / sqrt_squared_sum
        list_tuple[counter] = j
        counter = counter + 1
    return tuple(list_tuple)

vector = input("The input tuples should be separated by commas (,): ")
new_vector = []
list_vector_str = vector.split(",")
print(list_vector_str)
if len(list_vector_str) >= 2:
    for i in range(0, len(list_vector_str)):
        new_list = list_vector_str[i].replace(' ', '') 
        tuple_v = tuple(new_list)
        new_vector.append(tuple_v)

new_vector_norm = []
for i in new_vector:
    new_vector_norm.append(norm(i))

print(new_vector_norm)

#Number 11: The Fibonacci Sequence Exercise

def Fibonacci (n):
    m = [1,1]
    k = 2
    while k <= n:
        m.append(m[k - 1] + m[k - 2])
        k = k + 1
    return m

print(str(Fibonacci (19)))